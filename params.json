{"name":"Ops-dashboard","tagline":"Operations Dashboard to display alert information from Icinga/Nagios/Thruk","body":"### What is Ops-dashboard?\r\nCurrently the Operations side of the IT industry is lacking a good dashboard implementation that allows displaying alert data in a meaningful way on a big display.\r\n\r\nThis project aims to fill this gap, using an HTML/Javascript/PHP based solution that gets it's information from Icinga/Nagios's JSON output possibility.\r\n\r\nFIXME: link to documentation\r\n\r\n### Goals of a/the dashboard\r\nSuch a dashboard can be useful in multiple use cases, by primary goal is to be used as a wallboard, displayed on a big LCD screen in the operations team's office, however there's a valid need for an in-browser use case as well, allowing a quick overview of the system, even from remote locations.\r\n\r\nThe Ops-dashboard is organized around tiles, with each tile representing a check/alert. The tiles are organized in a queue, which is wrapped to multiple columns and rows, depending on the size of the browser window and the number of alerts that currently needs to be displayed.\r\n\r\nThe dashboard is using a completely dynamic layout using DOM manipulation, therefore it requires no refreshes of the browser page to display information. As a service returns to an OK state, the tile is removed using an animation sequence which allows the Operations staff to better understand how the states are changing in their systems.\r\n\r\n### Features\r\n#### Wallboard display\r\n* Information is highly visible by automatically scaling to target resolution\r\n* dynamic layout and animations show to visualize the state changes of the services, no page refresh needed\r\n* Show On-call/admin of the day in the header\r\n* Track when the last \"all good\" state occured\r\n* Team members may send messages to be displayed at the bottom of the page\r\n* For each alert, show:\r\n * Hostname on which the alert occured\r\n * Service name\r\n * Priority, if present\r\n * Service/Host checks, critical/warning/unknown states based on coloring of the tiles\r\n * In the form of tags:\r\n  * Soft/Hard state\r\n  * how long the alert is present\r\n  * is the service flapping?\r\n\r\n#### In-browser display\r\n* Fix the number of columns to a pre-defined value to get an overview of what is going on in the system\r\n* Scales automatically to mobile devices - needs some work though\r\n\r\n#### Why not show the Icinga/Nagios dashboard page?\r\nMany teams decide to put the icinga dashboard page on their big display, however due to the limitations of that interface it is not really good for showing much information. It refreshes every 60-90 seconds, there is too much information displayed, and when it comes to dashboards, less is definitely more. The font size is too small to see, and if you scale the page up , only a few services can be seen.\r\n\r\n### What technologies are used?\r\nThere is a set of PHP based backend scripts that fetch the JSON output of icinga/nagios. There is a HTML/JS ([jQuery](http://jquery.com/)/[jQuery-UI](http://jqueryui.com/)/[Backbone](http://backbonejs.org/)/[Underscore.js](http://underscorejs.org/)) based page that fetches the information from the PHP backend, and displays it.\r\n\r\nDue to the [same origin policy](http://en.wikipedia.org/wiki/Same-origin_policy), the dashboard must be running from the same location as the icinga server's web interface is located on.\r\n\r\n### What are the dependencies\r\nFIXME\r\n\r\n### How to install\r\nFIXME\r\n\r\n### Demo\r\nA demo page of version 0.9 can be found [here](http://bdeak.github.io/ops-dashboard/demo/0.9/icinga.html)\r\n\r\n### Documentation\r\nFIXME\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}
